What happens when you initialize a repository? Why do you need to do it?
When you initialize a repository, you create a repository that has a hidden '.git' directory. 
This doesn't do an initial commit, though. Initializing a repositiory is needed because it sets up 
the structure to support the repository + keep a log of what has been done to the project. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is different from the working directory and the repository because
it is where you add changes to the repository before putting them into the next committ. 

Its value is that it offers you control over commits and lets you see all the files you are about
to add before they are grouped into a logical change. 

How can you use the staging area to make sure you have one commit per logical
change?

I can add all my files to the staging area to make it a full commit and make sure I have everything I need. 


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches can help you when you have a big project by saving small little details. 
They can also help when working with multiple people-- each individual change can be saved to a repository. 

How do the diagrams help you visualize the branch structure?

The diagrams help me see the work flow and what events lead to another. 

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The result of merging two branches together is that there is a new commit stemming (get it?) from two branches. 
We represent in the diagram in the way we do because it helps us compare and contrast the codes we have
within the two branches and make edits if necessary. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

A pro of automatic merging is that it's quick and easy... it saves a lot of time. A con of automatic merging is
that it might result/create a version of a file that I did not expect/had different codes due to potential conflict 
between merged branches. 

A pro of having manual control is that the power is in my hands: I know what and when to commit, ensuring that nothing
will get puropsely messed up. A con of having manual control is that it can take a long time to save, and it is slower
than automatic merging. 
